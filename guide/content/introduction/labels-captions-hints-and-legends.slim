---
title: Labels, captions, hints and legends
---

h1.govuk-heading-xl Labels, captions, hints and legends

section

  h2.govuk-heading-l Labels

  p.govuk-body
    | All form helpers that generate a single input element
      automatically associate it with a corresponding <code>label</code>.

  p.govuk-body
    | By default, the label text is set to the capitalised name of the
      attribute. If the attribute contains underscores they will be left
      in. This is intentional behaviour to prompt the developer to add
      some more suitable text.

  == render('/partials/example-fig.*',
    caption: "An unconfigured label",
    code: text_field_with_no_label,
    hide_html_output: true)

  p.govuk-body
    | Labels are customised by passing in a hash of options with the
      following keys:

  dl.govuk-summary-list
    div.govuk-summary-list__row
      dt.govuk-summary-list__key
        code text

      dd.govuk-summary-list__value
        | The actual text that forms the label

    div.govuk-summary-list__row
      dt.govuk-summary-list__key
        code tag

      dd.govuk-summary-list__value
        | The HTML tag that the label will be wrapped in. This is useful
          on pages where the label is also the main header where the tag
          should be <code>h1</code>

    div.govuk-summary-list__row
      dt.govuk-summary-list__key
        code size

      dd.govuk-summary-list__value
        | The label size which follows the usual GOV.UK pattern of
          <code>xl</code>, <code>l</code>, <code>m</code> and <code>s</code>

    div.govuk-summary-list__row
      dt.govuk-summary-list__key
        code hidden

      dd.govuk-summary-list__value
        | Labels can be visually hidden when their presence would complicate
          the form. This is a common pattern when asking for multiple lines
          of address where a single label or legend will suffice. The hidden
          value defaults to <code>false</code> and can be overridden with
          <code>true</code>

  == render('/partials/example-fig.*',
    caption: "A fully-configured label",
    code: text_field_with_configured_label,
    hide_html_output: false)

  == render('/partials/example-fig.*',
    caption: "Setting label content with a proc",
    code: text_field_with_label_proc,
    hide_html_output: false) do
      p.govuk-body
        | Label content can be customised further using a
          #{link_to('Ruby proc', ruby_proc_link).html_safe}. Note that the content
          of the proc is rendered <em>inside the label</em> so the form builder
          can enforce consistency between the label's <code>for</code> attribute
          and the associated form element.

      p.govuk-body.important
        | This example contains raw html but Rails' built-in tag helpers are fully-supported.

section

  h2.govuk-heading-l Captions

  p.govuk-body
    | Sometimes you may need to make it clear that a heading is part of a
      larger section or group. To do this, you can use a heading with a caption.

  p.govuk-body
    | Captions are supported by all helpers that have labels or legends and can
      be configured with the following options:

  dl.govuk-summary-list
    .govuk-summary-list__row
      dt.govuk-summary-list__key
        code text

      dd.govuk-summary-list__value
        | The caption text

    .govuk-summary-list__row
      dt.govuk-summary-list__key
        code size

      dd.govuk-summary-list__value
        | The caption size, either <code>xl</code>, <code>l</code> or <code>m</code>

  p.govuk-body.important
    | If you want to place the caption <em>outside</em> of the label's tag you can
      do this by #{link_to('setting the label content with a proc', '#setting-label-content-with-a-proc').html_safe}.

  == render('/partials/example-fig.*',
    caption: "A label with a caption",
    code: text_field_with_caption,
    hide_html_output: false)

section

  h2.govuk-heading-l Hints

  p.govuk-body
    | Unlike labels, hints cannot be styled and their surrounding tags cannot
      be customised. They are set by providing a <code>hint_text</code> string
      parameter.

  p.govuk-body
    | To accomodate screenreaders and users of other assistive technology,
      <strong>hints must be associated with inputs</strong> via the
      <code>aria-describedby</code> attribute. The form builder does this
      automatically.

  == render('/partials/example-fig.*',
    caption: "A text field with hint",
    code: text_field_with_hint)

section

  h2.govuk-heading-l Legends

  p.govuk-body
    | Legends look, act and work in a similar fashion to labels but they
      describe a <em>group of inputs</em>.

  p.govuk-body
    | The GOV.UK Design System uses legends to describe radio button, check box
      and date fields but any group of related fields can be wrapped in a
      fieldset.

  p.govuk-body
    | Legends are customised by passing in a hash of options with the
      following keys:

  dl.govuk-summary-list
    div.govuk-summary-list__row
      dt.govuk-summary-list__key
        code text

      dd.govuk-summary-list__value
        | The actual text that forms the legend

    div.govuk-summary-list__row
      dt.govuk-summary-list__key
        code tag

      dd.govuk-summary-list__value
        | The HTML tag that the legend will be wrapped in. This is useful
          on pages where the label is also the main header. In cases like
          this, it should be set to <code>h1</code>

    div.govuk-summary-list__row
      dt.govuk-summary-list__key
        code size

      dd.govuk-summary-list__value
        | The legend size which follows the usual GOV.UK pattern of
          <code>xl</code>, <code>l</code>, <code>m</code> and <code>s</code>

    div.govuk-summary-list__row
      dt.govuk-summary-list__key
        code hidden

      dd.govuk-summary-list__value
        | Legends can be visually hidden when their presence would complicate
          the form. The hidden value defaults to <code>false</code> and can be
          overridden with <code>true</code>

  == render('/partials/example-fig.*',
    caption: "Radio buttons with a fully-customised legend",
    code: radios_with_legend,
    hide_html_output: true)

  == render('/partials/example-fig.*',
    caption: "Fully customising legends with procs",
    code: radios_with_legend_proc,
    hide_html_output: true) do

    p.govuk-body
      | To take even more control of legends the content can be passed in using
        a #{link_to('Ruby proc', ruby_proc_link).html_safe}.

    p.govuk-body.important
      | This example contains raw html but Rails' built-in tag helpers are fully-supported.
